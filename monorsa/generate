#!/usr/bin/env ruby

require "openssl"

class Integer
  def powmod(exponent, modulus)
    return 0 if modulus == 1
    if exponent < 0
      # There are surely faster ways
      return powmod(modulus-2, modulus).powmod(-exponent, modulus)
    end
    result = 1
    base = self % modulus
    while exponent > 0
      result = result*base%modulus if exponent%2 == 1
      exponent = exponent >> 1
      base = base*base%modulus
    end
    result
  end

  def extended_gcd(b)
    a = self
    last_remainder, remainder = a.abs, b.abs
    x, last_x, y, last_y = 0, 1, 1, 0
    while remainder != 0
      last_remainder, (quotient, remainder) = remainder, last_remainder.divmod(remainder)
      x, last_x = last_x - quotient*x, x
      y, last_y = last_y - quotient*y, y
    end

    return last_remainder, last_x * (a < 0 ? -1 : 1)
  end

  def invmod(et)
    g, x = extended_gcd(et)
    raise "The maths are broken!" unless g == 1
    x % et
  end
end

class String
  def to_i_binary
    unpack("C*").reduce(0) do |a,b|
      a*256 + b
    end
  end
end

module Enumerable
  def reduce_mul
    reduce(1) do |a,b|
      a*b
    end
  end
end

unless ARGV.size == 1
  STDERR.puts "Usage: #{$0} flag"
  exit 1
end

bits = 2048
n = OpenSSL::BN.generate_prime(bits).to_i
phi = n-1
e = 0x10001
d = e.invmod(phi)

flag = ARGV[0].to_i_binary
ct = flag.powmod(e, n)
raise unless ct.powmod(d, n) == flag

puts "n=#{n}"
puts "e=#{e}"
puts ""
puts "ct=#{ct}"

