#!/usr/bin/env ruby

require "openssl"
require "pry"
require "set"
require "pathname"

class Integer
  def powmod(exponent, modulus)
    return 0 if modulus == 1
    if exponent < 0
      # There are surely faster ways
      return powmod(modulus-2, modulus).powmod(-exponent, modulus)
    end
    result = 1
    base = self % modulus
    while exponent > 0
      result = result*base%modulus if exponent%2 == 1
      exponent = exponent >> 1
      base = base*base%modulus
    end
    result
  end
end

class String
  def to_i_binary
    unpack("C*").reduce(0) do |a,b|
      a*256 + b
    end
  end
end

module Enumerable
  def reduce_mul
    reduce(1) do |a,b|
      a*b
    end
  end
end

unless ARGV.size == 1
  STDERR.puts "Usage: #{$0} flag"
  exit 1
end

bit_size = 512
e = 0x10001

prime_pool = 200.times.map{ OpenSSL::BN.generate_prime(bit_size).to_i }.uniq

alice = prime_pool[0] * prime_pool[1]
bob = prime_pool[0] * prime_pool[2]
prime_pool.shift
prime_pool.shift
keypool = Set[bob]
while keypool.size < 100
  keypool << prime_pool.sample(2).reduce_mul
end
keys = *keypool.to_a.shuffle

Pathname("challenge").mkpath

Pathname("challenge/alice.key").write("n=#{alice}\ne=#{e}\n")

keys.each_with_index do |n, i|
  Pathname("challenge/anon-%03d.key" % (i+1)).write("n=#{n}\ne=#{e}\n")
end

flag = ARGV[0].to_i_binary
Pathname("challenge/message.txt.enc").write("#{ flag.powmod(e, alice) }\n")
